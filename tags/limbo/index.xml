<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>limbo on seh.dev</title>
    <link>https://seh.dev/tags/limbo/</link>
    <description>Recent content in limbo on seh.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2020, Sean Hinchee</copyright>
    <lastBuildDate>Tue, 29 Sep 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://seh.dev/tags/limbo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Polymorphism in Limbo and Go 2</title>
      <link>https://seh.dev/limbgo/</link>
      <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://seh.dev/limbgo/</guid>
      <description>Polymorphism in Limbo and Go 2 Motivation Go has recently announced that it will be receiving a form of polymorphism through generics in Go 2.
Prior to and influencing Go (and thus Go 2), the Limbo programming language from the Inferno operating system had implemented a somewhat similar syntax for polymorphism.
There are very tangible and crucial differences, but for novelty the two languages are cross-referenced.
This post was primarily motivated by a discussion and linguistic adventure that occurred during a stream exploring the Limbo language and Inferno OS.</description>
    </item>
    
    <item>
      <title>Program development in Limbo</title>
      <link>https://seh.dev/limbo-intro/</link>
      <pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://seh.dev/limbo-intro/</guid>
      <description>Program development in Limbo Motivation Resources covering software development under Inferno are fairly scarce.
As such, this post aims to provide a start-to-finish demonstration of program development in Limbo inside Inferno.
Introduction This post assumes you&amp;rsquo;re using Inferno, specifically purgatorio, hosted under linux/amd64 or similar.
It&amp;rsquo;s also possible to use Inferno under Docker as per the INSTALL file.
Other platforms are supported, but steps may differ here or there.
The rune $ indicates a unix shell command under bash, probably.</description>
    </item>
    
    <item>
      <title>Go&#39;s History in Code</title>
      <link>https://seh.dev/go-legacy/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://seh.dev/go-legacy/</guid>
      <description>Go&amp;rsquo;s History in Code This post intends to showcase programming patterns, or stuff, which is common between Newsqueak, Alef, Plan9 C, Limbo, and Go.
All of these code snippets should be complete as shown and compilable/runnable in the state presented. The Alef examples might have subtle typos, but this is due to the fact I had to manually re-type them out from VirtualBox since I didn&amp;rsquo;t have copy/paste available to the guest.</description>
    </item>
    
  </channel>
</rss>