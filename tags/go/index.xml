<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on seh.dev</title>
    <link>https://seh.dev/tags/go/</link>
    <description>Recent content in go on seh.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2022, Sean Hinchee</copyright>
    <lastBuildDate>Tue, 29 Sep 2020 00:00:00 +0000</lastBuildDate>
    
  <atom:link href="https://seh.dev/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Polymorphism in Limbo and Go 2</title>
      <link>https://seh.dev/limbgo/</link>
      <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://seh.dev/limbgo/</guid>
      <description>Polymorphism in Limbo and Go 2 Motivation Go has recently announced that it will be receiving a form of polymorphism through generics in Go 2.
Prior to and influencing Go (and thus Go 2), the Limbo programming language from the Inferno operating system had implemented a somewhat similar syntax for polymorphism.
There are very tangible and crucial differences, but for novelty the two languages are cross-referenced.
This post was primarily motivated by a discussion and linguistic adventure that occurred during a stream exploring the Limbo language and Inferno OS.</description>
	  <mp3></mp3>
	  <youtube_id></youtube_id>
    </item>
    
    <item>
      <title>The Runez Compression Algorithms</title>
      <link>https://seh.dev/runez/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://seh.dev/runez/</guid>
      <description>The Runez Compression Algorithms In January of 2020 I set about writing a pair of naïve, lossless, compression algorithms inspired by a series of conversations over coffee with a good friend.
These algorithms are very naïve, but simple structurally and to that end I will attempt to convey the implementation.
There are two algorithms, runez and runez2.
The runez2 algorithm is a strictly superior successor \(^ \dagger\) to runez with the primary improvement being that there is no unique character limit, which will be explained later.</description>
	  <mp3></mp3>
	  <youtube_id></youtube_id>
    </item>
    
    <item>
      <title>Go&#39;s History in Code</title>
      <link>https://seh.dev/go-legacy/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://seh.dev/go-legacy/</guid>
      <description>Go&amp;rsquo;s History in Code This post intends to showcase programming patterns, or stuff, which is common between Newsqueak, Alef, Plan9 C, Limbo, and Go.
All of these code snippets should be complete as shown and compilable/runnable in the state presented. The Alef examples might have subtle typos, but this is due to the fact I had to manually re-type them out from VirtualBox since I didn&amp;rsquo;t have copy/paste available to the guest.</description>
	  <mp3></mp3>
	  <youtube_id></youtube_id>
    </item>
    
    <item>
      <title>DiscordFS —- A Tale of Two Clients</title>
      <link>https://seh.dev/discordfs-thoughts/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://seh.dev/discordfs-thoughts/</guid>
      <description>DiscordFS &amp;ndash; A Tale of Two Clients Around a year ago I worked on my first attempt at a Discord client that would build and function on 9front. Since then the landscape hasn&amp;rsquo;t changed much and neither has the client. It works well enough for my needs and the two or so other people who use it. Since then however, the number of members in the 9fans Discord Server has grown many times its original size.</description>
	  <mp3></mp3>
	  <youtube_id></youtube_id>
    </item>
    
  </channel>
</rss>
